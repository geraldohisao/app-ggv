generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Call {
  id              String   @id @default(cuid())
  providerCallId  String   @unique
  from            String
  to              String
  agentId         String
  startedAt       DateTime?
  endedAt         DateTime?
  durationSec     Int?
  consent         Boolean  @default(false)
  source          String   @default("voip")
  status          String   @default("received") // received|processing|processed|failed
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  recording       Recording?
  transcript      Transcript?
  insights        Insights?
  scorecard       Scorecard?
  segments        Segment[]
  crmEvents       CRMEvent[]
}

model Recording {
  id          String  @id @default(cuid())
  callId      String  @unique
  call        Call    @relation(fields: [callId], references: [id])
  storageKey  String
  originalUrl String
  format      String
  sampleRate  Int?
  channels    Int?
}

model Transcript {
  id              String   @id @default(cuid())
  callId          String   @unique
  call            Call     @relation(fields: [callId], references: [id])
  language        String
  text            String
  wordsJson       Json
  diarizationJson Json
}

model Insights {
  id             String   @id @default(cuid())
  callId         String   @unique
  call           Call     @relation(fields: [callId], references: [id])
  summary        String
  painPointsJson Json
  objectionsJson Json
  nextActionsJson Json
  tags           String[]
}

model Scorecard {
  id          String  @id @default(cuid())
  callId      String  @unique
  call        Call    @relation(fields: [callId], references: [id])
  templateKey String
  itemsJson   Json
  totalScore  Int
}

model CRMEvent {
  id       String @id @default(cuid())
  callId   String
  call     Call   @relation(fields: [callId], references: [id])
  target   String
  payloadJson Json
  status   String  @default("pending") // pending|sent|error
  errorMsg String?
  createdAt DateTime @default(now())
}

model Segment {
  id       String  @id @default(cuid())
  callId   String
  call     Call    @relation(fields: [callId], references: [id])
  label    String
  startSec Int
  endSec   Int
  excerpt  String
}
