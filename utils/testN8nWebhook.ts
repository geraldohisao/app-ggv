/**
 * Utilit√°rio para testar se o webhook N8N est√° ativo e funcionando
 */

interface WebhookTestResult {
  isActive: boolean;
  status: number | null;
  message: string;
  endpoint: string;
  error?: any;
}

/**
 * Testa se o webhook N8N est√° respondendo
 */
export async function testN8nWebhook(dealId: string = '569934'): Promise<WebhookTestResult> {
  // Usar proxy local em desenvolvimento
  const isDevelopment = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';

  const ENDPOINT = isDevelopment 
    ? 'http://localhost:8080/webhook-test/diag-ggv-register'
    : 'https://app.grupoggv.com/api/webhook/diag-ggv-register';
  
  const url = `${ENDPOINT}?deal_id=${encodeURIComponent(dealId)}`;
  
  console.log('üß™ TESTE N8N - Verificando webhook...');
  console.log('üìç TESTE N8N - URL:', url);
  
  try {
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
      },
    });
    
    console.log('üìä TESTE N8N - Status:', response.status);
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ TESTE N8N - Webhook ativo e funcionando!');
      console.log('üì¶ TESTE N8N - Dados recebidos:', data);
      
      return {
        isActive: true,
        status: response.status,
        message: 'Webhook N8N est√° ativo e funcionando!',
        endpoint: url,
      };
    } else {
      const errorText = await response.text();
      console.error('‚ùå TESTE N8N - Webhook n√£o est√° funcionando');
      console.error('üìÑ TESTE N8N - Resposta:', errorText);
      
      return {
        isActive: false,
        status: response.status,
        message: `Webhook retornou erro ${response.status}: ${response.statusText}`,
        endpoint: url,
        error: errorText,
      };
    }
  } catch (error: any) {
    console.error('‚ùå TESTE N8N - Erro na requisi√ß√£o:', error);
    
    return {
      isActive: false,
      status: null,
      message: `Erro na requisi√ß√£o: ${error.message}`,
      endpoint: url,
      error: error,
    };
  }
}

/**
 * Fun√ß√£o global para testar via console
 */
if (typeof window !== 'undefined') {
  (window as any).testN8nWebhook = testN8nWebhook;
}

/**
 * Lista de verifica√ß√µes para diagnosticar problemas com o webhook
 */
export const webhookDiagnostics = {
  async runFullDiagnostic(dealId: string = '569934') {
    console.log('üîç DIAGN√ìSTICO COMPLETO DO WEBHOOK N8N');
    console.log('=====================================');
    
    // 1. Teste b√°sico
    console.log('1Ô∏è‚É£ Testando conectividade b√°sica...');
    const result = await testN8nWebhook(dealId);
    
    if (result.isActive) {
      console.log('‚úÖ Webhook est√° funcionando perfeitamente!');
      return result;
    }
    
    // 2. Diagn√≥sticos adicionais
    console.log('2Ô∏è‚É£ Executando diagn√≥sticos...');
    
    if (result.status === 404) {
      console.log('‚ùå PROBLEMA: Webhook n√£o encontrado (404)');
      console.log('üí° POSS√çVEIS SOLU√á√ïES:');
      console.log('   ‚Ä¢ Verificar se o workflow N8N est√° ativo');
      console.log('   ‚Ä¢ Confirmar a URL do webhook no N8N');
      console.log('   ‚Ä¢ Verificar se o N8N est√° rodando');
    } else if (result.status === 500) {
      console.log('‚ùå PROBLEMA: Erro interno do servidor (500)');
      console.log('üí° POSS√çVEIS SOLU√á√ïES:');
      console.log('   ‚Ä¢ Verificar logs do N8N');
      console.log('   ‚Ä¢ Verificar configura√ß√£o do workflow');
      console.log('   ‚Ä¢ Verificar conex√£o com Pipedrive');
    } else if (!result.status) {
      console.log('‚ùå PROBLEMA: Erro de rede/CORS');
      console.log('üí° POSS√çVEIS SOLU√á√ïES:');
      console.log('   ‚Ä¢ Verificar se o N8N est√° acess√≠vel');
      console.log('   ‚Ä¢ Verificar configura√ß√µes de CORS');
      console.log('   ‚Ä¢ Verificar proxy do Vite');
    }
    
    console.log('=====================================');
    return result;
  }
};

// Fun√ß√£o global para diagn√≥stico completo
if (typeof window !== 'undefined') {
  (window as any).diagnoseN8nWebhook = webhookDiagnostics.runFullDiagnostic;
}
