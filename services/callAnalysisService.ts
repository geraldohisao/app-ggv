// services/callAnalysisService.ts
// Servi√ßo especializado em an√°lise de IA para liga√ß√µes por deal

import { supabase } from './supabaseClient';
import { getAIAssistantResponseStream } from './geminiService';

export interface CallTranscription {
  call_id: string;
  provider_call_id: string;
  from_number: string;
  to_number: string;
  agent_id: string;
  direction: string;
  call_type: string;
  duration: number;
  transcription: string;
  insights: any;
  scorecard: any;
  created_at: string;
  call_status: string;
}

export interface DealCallStats {
  total_calls: number;
  total_duration: number;
  avg_duration: number;
  successful_calls: number;
  first_call_date: string;
  last_call_date: string;
  call_types: Record<string, number>;
  agents_involved: Record<string, number>;
}

export interface CallAnalysisResult {
  deal_id: string;
  analysis_content: string;
  transcription_summary: string;
  call_count: number;
  total_duration: number;
  created_at: string;
}

/**
 * Busca todas as transcri√ß√µes de um deal espec√≠fico
 */
export async function getDealTranscriptions(dealId: string): Promise<CallTranscription[]> {
  try {
    console.log('üîç CALL ANALYSIS - Buscando transcri√ß√µes para deal:', dealId);
    
    const { data, error } = await supabase.rpc('get_deal_transcriptions_direct', {
      p_deal_id: dealId
    });

    if (error) {
      console.error('‚ùå CALL ANALYSIS - Erro ao buscar transcri√ß√µes:', error);
      throw new Error(`Erro ao buscar transcri√ß√µes: ${error.message}`);
    }

    console.log('‚úÖ CALL ANALYSIS - Transcri√ß√µes encontradas:', data?.length || 0);
    return data || [];
  } catch (error) {
    console.error('‚ùå CALL ANALYSIS - Erro geral ao buscar transcri√ß√µes:', error);
    throw error;
  }
}

/**
 * Busca estat√≠sticas das liga√ß√µes de um deal
 */
export async function getDealCallStats(dealId: string): Promise<DealCallStats | null> {
  try {
    console.log('üìä CALL ANALYSIS - Buscando estat√≠sticas para deal:', dealId);
    
    const { data, error } = await supabase.rpc('get_deal_call_stats', {
      p_deal_id: dealId
    });

    if (error) {
      console.error('‚ùå CALL ANALYSIS - Erro ao buscar estat√≠sticas:', error);
      return null;
    }

    console.log('‚úÖ CALL ANALYSIS - Estat√≠sticas encontradas:', data?.[0]);
    return data?.[0] || null;
  } catch (error) {
    console.error('‚ùå CALL ANALYSIS - Erro geral ao buscar estat√≠sticas:', error);
    return null;
  }
}

/**
 * Gera an√°lise completa das liga√ß√µes de um deal usando IA
 */
export async function* analyzeDealCallsWithAI(
  dealId: string,
  customPrompt?: string
): AsyncGenerator<string, void, unknown> {
  try {
    console.log('ü§ñ CALL ANALYSIS - Iniciando an√°lise IA para deal:', dealId);

    // 1. Buscar transcri√ß√µes e estat√≠sticas
    const [transcriptions, stats] = await Promise.all([
      getDealTranscriptions(dealId),
      getDealCallStats(dealId)
    ]);

    if (!transcriptions || transcriptions.length === 0) {
      yield '‚ùå **Nenhuma transcri√ß√£o encontrada**\n\nEste deal n√£o possui liga√ß√µes com transcri√ß√µes dispon√≠veis para an√°lise.';
      return;
    }

    console.log('üìù CALL ANALYSIS - Processando', transcriptions.length, 'transcri√ß√µes');

    // 2. Preparar contexto para a IA
    const contextData = prepareAnalysisContext(transcriptions, stats, dealId);
    
    // 3. Buscar persona especializada
    const analystPersona = await getCallAnalystPersona();
    if (!analystPersona) {
      yield '‚ùå **Erro de configura√ß√£o**\n\nA persona de an√°lise de liga√ß√µes n√£o est√° configurada.';
      return;
    }

    // 4. Preparar prompt personalizado ou usar padr√£o
    const analysisPrompt = customPrompt || generateDefaultAnalysisPrompt(contextData);

    // 5. Gerar an√°lise com IA
    console.log('üß† CALL ANALYSIS - Gerando an√°lise com IA...');
    
    let fullAnalysisContent = '';
    for await (const chunk of getAIAssistantResponseStream(
      analysisPrompt,
      analystPersona,
      [], // sem hist√≥rico para an√°lise
      contextData.transcriptionContext,
      { requestId: `call_analysis_${dealId}_${Date.now()}` }
    )) {
      fullAnalysisContent += chunk;
      yield chunk;
    }

    // 6. Salvar an√°lise permanentemente no hist√≥rico
    await saveAnalysisToHistory(dealId, fullAnalysisContent, contextData, customPrompt);

  } catch (error) {
    console.error('‚ùå CALL ANALYSIS - Erro na an√°lise:', error);
    yield `‚ùå **Erro na an√°lise**\n\nOcorreu um erro ao analisar as liga√ß√µes: ${error instanceof Error ? error.message : 'Erro desconhecido'}`;
  }
}

/**
 * Prepara o contexto para an√°lise das transcri√ß√µes
 */
function prepareAnalysisContext(
  transcriptions: CallTranscription[], 
  stats: DealCallStats | null, 
  dealId: string
): {
  transcriptionContext: string;
  summaryData: any;
} {
  const transcriptionContext = transcriptions
    .map((call, index) => {
      const callDate = new Date(call.created_at).toLocaleDateString('pt-BR');
      const callDuration = Math.round(call.duration / 60); // em minutos
      
      return `[#src:call_${index + 1}]
**LIGA√á√ÉO ${index + 1} - ${callDate}**
- **ID**: ${call.provider_call_id}
- **Dire√ß√£o**: ${call.direction}
- **Tipo**: ${call.call_type || 'N/A'}
- **Dura√ß√£o**: ${callDuration} minutos
- **Agente**: ${call.agent_id}
- **Status**: ${call.call_status}

**TRANSCRI√á√ÉO:**
${call.transcription}

${call.insights && Object.keys(call.insights).length > 0 ? `
**INSIGHTS EXISTENTES:**
${JSON.stringify(call.insights, null, 2)}
` : ''}

---`;
    })
    .join('\n\n');

  const summaryData = {
    deal_id: dealId,
    total_calls: stats?.total_calls || transcriptions.length,
    total_duration: stats?.total_duration || transcriptions.reduce((sum, call) => sum + call.duration, 0),
    avg_duration: stats?.avg_duration || 0,
    successful_calls: stats?.successful_calls || transcriptions.length,
    first_call_date: stats?.first_call_date || transcriptions[0]?.created_at,
    last_call_date: stats?.last_call_date || transcriptions[transcriptions.length - 1]?.created_at,
    call_types: stats?.call_types || {},
    agents_involved: stats?.agents_involved || {}
  };

  return {
    transcriptionContext,
    summaryData
  };
}

/**
 * Gera prompt padr√£o para an√°lise
 */
function generateDefaultAnalysisPrompt(contextData: any): string {
  return `Analise todas as liga√ß√µes deste deal e forne√ßa uma vis√£o estrat√©gica completa.

**CONTEXTO DO DEAL:**
- Total de liga√ß√µes: ${contextData.summaryData.total_calls}
- Dura√ß√£o total: ${Math.round(contextData.summaryData.total_duration / 60)} minutos
- Per√≠odo: ${new Date(contextData.summaryData.first_call_date).toLocaleDateString('pt-BR')} a ${new Date(contextData.summaryData.last_call_date).toLocaleDateString('pt-BR')}

**Solicito uma an√°lise que inclua:**

1. **Resumo Executivo** - Vis√£o geral do relacionamento comercial
2. **Progress√£o do Deal** - Como evoluiu ao longo das liga√ß√µes
3. **Obje√ß√µes Identificadas** - Principais preocupa√ß√µes do cliente
4. **Oportunidades** - Momentos de oportunidade perdidos ou aproveitados
5. **Qualidade da Abordagem** - Efetividade das estrat√©gias do vendedor
6. **Pr√≥ximos Passos** - Recomenda√ß√µes estrat√©gicas baseadas no hist√≥rico

**Transcri√ß√µes para an√°lise:**
${contextData.transcriptionContext}`;
}

/**
 * Busca a persona especializada em an√°lise de liga√ß√µes
 */
async function getCallAnalystPersona() {
  try {
    const { data, error } = await supabase
      .from('ai_personas')
      .select('*')
      .eq('id', 'call_analyst')
      .single();

    if (error) {
      console.error('‚ùå CALL ANALYSIS - Erro ao buscar persona:', error);
      return null;
    }

    return data;
  } catch (error) {
    console.error('‚ùå CALL ANALYSIS - Erro geral ao buscar persona:', error);
    return null;
  }
}

/**
 * Salva a an√°lise permanentemente no hist√≥rico
 */
async function saveAnalysisToHistory(
  dealId: string, 
  analysisContent: string,
  contextData: any, 
  customPrompt?: string
): Promise<string | null> {
  try {
    console.log('üíæ CALL ANALYSIS - Salvando an√°lise permanentemente para deal:', dealId);

    const { data, error } = await supabase.rpc('save_analysis_permanent', {
      p_deal_id: dealId,
      p_analysis_content: analysisContent,
      p_transcription_summary: `Total: ${contextData.summaryData.total_calls} liga√ß√µes, ${Math.round(contextData.summaryData.total_duration / 60)} minutos`,
      p_call_count: contextData.summaryData.total_calls,
      p_total_duration: contextData.summaryData.total_duration,
      p_custom_prompt: customPrompt || null
    });

    if (error) {
      console.error('‚ùå CALL ANALYSIS - Erro ao salvar no hist√≥rico:', error);
      return null;
    } else {
      console.log('‚úÖ CALL ANALYSIS - An√°lise salva permanentemente, ID:', data);
      return data;
    }
  } catch (error) {
    console.error('‚ùå CALL ANALYSIS - Erro geral ao salvar no hist√≥rico:', error);
    return null;
  }
}

/**
 * Busca a √∫ltima an√°lise do hist√≥rico
 */
export async function getLatestAnalysis(dealId: string): Promise<CallAnalysisResult | null> {
  try {
    const { data, error } = await supabase.rpc('get_latest_analysis', {
      p_deal_id: dealId
    });

    if (error) {
      console.log('‚ÑπÔ∏è CALL ANALYSIS - Nenhuma an√°lise no hist√≥rico encontrada');
      return null;
    }

    console.log('‚úÖ CALL ANALYSIS - √öltima an√°lise encontrada:', data?.[0]?.id);
    return data?.[0] || null;
  } catch (error) {
    console.error('‚ùå CALL ANALYSIS - Erro ao buscar hist√≥rico:', error);
    return null;
  }
}

/**
 * Busca todo o hist√≥rico de an√°lises de um deal
 */
export async function getAnalysisHistory(dealId: string): Promise<CallAnalysisResult[]> {
  try {
    const { data, error } = await supabase.rpc('get_deal_analysis_history', {
      p_deal_id: dealId
    });

    if (error) {
      console.error('‚ùå CALL ANALYSIS - Erro ao buscar hist√≥rico:', error);
      return [];
    }

    console.log('‚úÖ CALL ANALYSIS - Hist√≥rico encontrado:', data?.length || 0, 'an√°lises');
    return data || [];
  } catch (error) {
    console.error('‚ùå CALL ANALYSIS - Erro geral ao buscar hist√≥rico:', error);
    return [];
  }
}

/**
 * Limpa an√°lises expiradas do cache
 */
export async function cleanupExpiredAnalyses(): Promise<number> {
  try {
    const { data, error } = await supabase.rpc('cleanup_expired_call_analysis');

    if (error) {
      console.error('‚ùå CALL ANALYSIS - Erro ao limpar cache:', error);
      return 0;
    }

    console.log('üßπ CALL ANALYSIS - An√°lises expiradas removidas:', data || 0);
    return data || 0;
  } catch (error) {
    console.error('‚ùå CALL ANALYSIS - Erro geral ao limpar cache:', error);
    return 0;
  }
}