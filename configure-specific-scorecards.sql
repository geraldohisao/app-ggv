-- 游댢 CONFIGURA칂츾O: Scorecards Espec칤ficos para Evitar Conflitos
-- Configura scorecards com especificidade adequada para evitar sele칞칚o amb칤gua

-- 1. Verificar scorecards existentes e conflitos
SELECT 'Scorecards existentes:' as info;
SELECT 
    id,
    name,
    active,
    target_call_types,
    target_pipelines,
    target_cadences
FROM scorecards 
ORDER BY name;

-- 2. Verificar conflitos por pipeline
SELECT 'Conflitos detectados:' as info;
SELECT * FROM check_scorecard_conflicts();

-- 3. Configurar scorecards com especificidade adequada

-- 3.1. Scorecard "Liga칞칚o - Consultoria" (gen칠rico para consultoria)
UPDATE scorecards 
SET 
    target_call_types = ARRAY['consultoria'],
    target_pipelines = ARRAY['Qualifica칞칚o', 'Descoberta de Necessidades', 'Agendamento'],
    target_cadences = ARRAY['inbound', 'outbound']
WHERE name = 'Liga칞칚o - Consultoria';

-- 3.2. Scorecard "Apresenta칞칚o de Proposta" (espec칤fico para consultoria + apresenta칞칚o)
UPDATE scorecards 
SET 
    target_call_types = ARRAY['consultoria'],
    target_pipelines = ARRAY['Apresenta칞칚o de Proposta'],
    target_cadences = ARRAY['inbound', 'outbound']
WHERE name = 'Apresenta칞칚o de Proposta';

-- 3.3. Criar scorecard espec칤fico para vendas + apresenta칞칚o (se necess치rio)
INSERT INTO scorecards (
    name, 
    description, 
    active, 
    target_call_types, 
    target_pipelines, 
    target_cadences,
    created_at,
    updated_at
)
SELECT 
    'Apresenta칞칚o de Proposta - Vendas',
    'Scorecard espec칤fico para apresenta칞칚o de proposta em vendas',
    true,
    ARRAY['vendas'],
    ARRAY['Apresenta칞칚o de Proposta'],
    ARRAY['inbound', 'outbound'],
    NOW(),
    NOW()
WHERE NOT EXISTS (
    SELECT 1 FROM scorecards 
    WHERE name = 'Apresenta칞칚o de Proposta - Vendas'
);

-- 3.4. Criar scorecard para follow-up (espec칤fico)
INSERT INTO scorecards (
    name, 
    description, 
    active, 
    target_call_types, 
    target_pipelines, 
    target_cadences,
    created_at,
    updated_at
)
SELECT 
    'Follow-up de Proposta',
    'Scorecard para chamadas de follow-up ap칩s apresenta칞칚o de proposta',
    true,
    ARRAY['consultoria', 'vendas'],
    ARRAY['Follow-up', 'Acompanhamento'],
    ARRAY['inbound', 'outbound'],
    NOW(),
    NOW()
WHERE NOT EXISTS (
    SELECT 1 FROM scorecards 
    WHERE name = 'Follow-up de Proposta'
);

-- 4. Verificar configura칞칚o final
SELECT 'Configura칞칚o final dos scorecards:' as info;
SELECT 
    s.id,
    s.name,
    s.active,
    s.target_call_types,
    s.target_pipelines,
    s.target_cadences,
    COUNT(sc.id) as criteria_count
FROM scorecards s
LEFT JOIN scorecard_criteria sc ON s.id = sc.scorecard_id
GROUP BY s.id, s.name, s.active, s.target_call_types, s.target_pipelines, s.target_cadences
ORDER BY s.name;

-- 5. Testar sele칞칚o para diferentes cen치rios

-- 5.1. Teste: Consultoria + Apresenta칞칚o de Proposta
SELECT 'Teste 1: Consultoria + Apresenta칞칚o de Proposta' as test_info;
SELECT 
    name,
    match_score,
    specificity_score,
    match_details,
    ranking_position
FROM debug_scorecard_selection('consultoria', 'Apresenta칞칚o de Proposta', 'inbound');

-- 5.2. Teste: Vendas + Apresenta칞칚o de Proposta  
SELECT 'Teste 2: Vendas + Apresenta칞칚o de Proposta' as test_info;
SELECT 
    name,
    match_score,
    specificity_score,
    match_details,
    ranking_position
FROM debug_scorecard_selection('vendas', 'Apresenta칞칚o de Proposta', 'inbound');

-- 5.3. Teste: Consultoria + Qualifica칞칚o
SELECT 'Teste 3: Consultoria + Qualifica칞칚o' as test_info;
SELECT 
    name,
    match_score,
    specificity_score,
    match_details,
    ranking_position
FROM debug_scorecard_selection('consultoria', 'Qualifica칞칚o', 'inbound');

-- 5.4. Teste: Follow-up
SELECT 'Teste 4: Follow-up' as test_info;
SELECT 
    name,
    match_score,
    specificity_score,
    match_details,
    ranking_position
FROM debug_scorecard_selection('consultoria', 'Follow-up', 'inbound');

-- 6. Verificar se ainda h치 conflitos
SELECT 'Conflitos ap칩s configura칞칚o:' as info;
SELECT * FROM check_scorecard_conflicts();
