-- üîß CORRE√á√ÉO: Priorizar scorecards por pipeline/etapa
-- Corrige o problema de sele√ß√£o para respeitar a etapa da liga√ß√£o

-- 1. Verificar scorecards existentes
SELECT 'Scorecards antes da corre√ß√£o:' as info;
SELECT 
    id,
    name,
    active,
    target_call_types,
    target_pipelines,
    target_cadences
FROM scorecards 
ORDER BY name;

-- 2. Configurar scorecards com especificidade adequada

-- 2.1. Scorecard "Liga√ß√£o - Consultoria" (gen√©rico - N√ÉO para apresenta√ß√£o)
UPDATE scorecards 
SET 
    target_call_types = ARRAY['consultoria'],
    target_pipelines = ARRAY['Qualifica√ß√£o', 'Descoberta de Necessidades', 'Agendamento', 'Follow-up'],
    target_cadences = ARRAY['inbound', 'outbound']
WHERE name = 'Liga√ß√£o - Consultoria';

-- 2.2. Scorecard "Scorecard Follow Up" (espec√≠fico para apresenta√ß√£o)
UPDATE scorecards 
SET 
    target_call_types = ARRAY['consultoria'],
    target_pipelines = ARRAY['Apresenta√ß√£o de Proposta'],
    target_cadences = ARRAY['inbound', 'outbound']
WHERE name = 'Scorecard Follow Up';

-- 2.3. Criar scorecard espec√≠fico para apresenta√ß√£o se n√£o existir
INSERT INTO scorecards (
    name, 
    description, 
    active, 
    target_call_types, 
    target_pipelines, 
    target_cadences
)
SELECT 
    'Apresenta√ß√£o de Proposta - Consultoria',
    'Scorecard espec√≠fico para apresenta√ß√£o de proposta em consultoria',
    true,
    ARRAY['consultoria'],
    ARRAY['Apresenta√ß√£o de Proposta'],
    ARRAY['inbound', 'outbound']
WHERE NOT EXISTS (
    SELECT 1 FROM scorecards 
    WHERE name = 'Apresenta√ß√£o de Proposta - Consultoria'
);

-- 3. Verificar configura√ß√£o ap√≥s corre√ß√£o
SELECT 'Scorecards ap√≥s corre√ß√£o:' as info;
SELECT 
    id,
    name,
    active,
    target_call_types,
    target_pipelines,
    target_cadences
FROM scorecards 
ORDER BY name;

-- 4. Testar sele√ß√£o corrigida

-- 4.1. Teste: Consultoria + Apresenta√ß√£o de Proposta (deve selecionar scorecard espec√≠fico)
SELECT 'Teste 1: Consultoria + Apresenta√ß√£o de Proposta (deve priorizar espec√≠fico):' as test_info;

SELECT 
    name,
    match_score,
    specificity_score,
    match_details,
    target_pipelines,
    ranking_position
FROM debug_scorecard_selection('consultoria', 'Apresenta√ß√£o de Proposta', 'inbound');

-- 4.2. Teste: Consultoria + Qualifica√ß√£o (deve usar gen√©rico)
SELECT 'Teste 2: Consultoria + Qualifica√ß√£o (deve usar gen√©rico):' as test_info;

SELECT 
    name,
    match_score,
    specificity_score,
    match_details,
    target_pipelines,
    ranking_position
FROM debug_scorecard_selection('consultoria', 'Qualifica√ß√£o', 'inbound');

-- 4.3. Teste: Consultoria + Descoberta (deve usar gen√©rico)
SELECT 'Teste 3: Consultoria + Descoberta de Necessidades (deve usar gen√©rico):' as test_info;

SELECT 
    name,
    match_score,
    specificity_score,
    match_details,
    target_pipelines,
    ranking_position
FROM debug_scorecard_selection('consultoria', 'Descoberta de Necessidades', 'inbound');

-- 5. Verificar se ainda h√° conflitos
SELECT 'Conflitos ap√≥s corre√ß√£o:' as info;
SELECT * FROM check_scorecard_conflicts();

-- 6. Teste final: Verificar se pipeline est√° sendo respeitado
SELECT 'RESULTADO FINAL - Pipeline deve ser respeitado:' as info;

-- Se pipeline = "Apresenta√ß√£o de Proposta" ‚Üí deve selecionar scorecard espec√≠fico
-- Se pipeline = "Qualifica√ß√£o" ‚Üí deve selecionar scorecard gen√©rico
SELECT 
    'Apresenta√ß√£o de Proposta' as pipeline_teste,
    name as scorecard_selecionado,
    match_score,
    specificity_score,
    target_pipelines
FROM debug_scorecard_selection('consultoria', 'Apresenta√ß√£o de Proposta', 'inbound')
LIMIT 1;
