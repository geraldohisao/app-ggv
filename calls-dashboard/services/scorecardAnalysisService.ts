/**
 * Servi√ßo de An√°lise de Scorecard com OpenAI GPT
 * Analisa transcri√ß√µes de chamadas usando crit√©rios de scorecard
 */

import { supabase } from '../../services/supabaseClient';
import { callOpenAI } from './openaiService';

// Interfaces
interface ScorecardCriterion {
  id: string;
  name: string;
  description: string;
  weight: number;
  max_score: number;
  order_index: number;
}

interface Scorecard {
  id: string;
  name: string;
  description: string;
  conversation_type: string;
  active: boolean;
}

export interface CriterionAnalysis {
  criterion_id: string;
  criterion_name: string;
  criterion_description: string;
  achieved_score: number;
  max_score: number;
  percentage: number;
  analysis: string;
  suggestions: string[];
  evidence: string[];
}

export interface ScorecardAnalysisResult {
  scorecard_used: {
    id: string;
    name: string;
    description: string;
  };
  overall_score: number;
  max_possible_score: number;
  final_grade: number | null; // 0-10 ou null se an√°lise falhou
  criteria_analysis: CriterionAnalysis[];
  general_feedback: string;
  strengths: string[];
  improvements: string[];
  confidence: number; // 0-1
}

// Fun√ß√£o para chamar IA (agora usando OpenAI GPT)
async function callAIAPI(prompt: string): Promise<string> {
  console.log('ü§ñ Iniciando chamada para OpenAI GPT...');
  
  try {
    const response = await callOpenAI(prompt);
    console.log('‚úÖ OpenAI GPT respondeu com sucesso!');
    return response;
  } catch (error) {
    console.error('‚ùå Erro ao chamar OpenAI:', error);
    throw new Error('API OpenAI indispon√≠vel. Verifique a configura√ß√£o da chave em app_settings.');
  }
}

// Tentar extrair e reparar JSON retornado pelo modelo
function extractJson(text: string): any {
  try {
    console.log('üîç Tentando extrair JSON da resposta:', (text || '').substring(0, 200) + '...');
  } catch {
    console.log('üîç Tentando extrair JSON da resposta: [conte√∫do indispon√≠vel]');
  }
  
  const tryParse = (s: string): any => {
    try { 
      const parsed = JSON.parse(s);
      console.log('‚úÖ JSON v√°lido encontrado!');
      return parsed;
    } catch (e) { 
      console.log('‚ùå JSON inv√°lido:', e.message);
      return null; 
    }
  };

  // 1) Bloco ```json ... ```
  const fenced = text.match(/```json\s*([\s\S]*?)\s*```/i) || text.match(/```\s*([\s\S]*?)\s*```/i);
  if (fenced && fenced[1]) {
    console.log('üîç Tentando bloco fenced JSON...');
    const parsed = tryParse(fenced[1].trim());
    if (parsed) return parsed;
  }

  // 2) Encontrar primeiro objeto JSON equilibrado
  const start = text.indexOf('{');
  if (start !== -1) {
    console.log('üîç Tentando encontrar objeto JSON...');
    let depth = 0;
    for (let i = start; i < text.length; i++) {
      const ch = text[i];
      if (ch === '{') depth++;
      else if (ch === '}') {
        depth--;
        if (depth === 0) {
          const candidate = text.slice(start, i + 1);
          try { console.log('üîç Candidato JSON:', (candidate || '').substring(0, 100) + '...'); } catch {}
          const parsed = tryParse(candidate);
          if (parsed) return parsed;
          
          // 2b) Reparos simples: remover v√≠rgulas finais
          const repaired = candidate
            .replace(/,\s*([}\]])/g, '$1')
            .replace(/\t/g, ' ')
            .replace(/\n\s*\n/g, '\n');
          try { console.log('üîç JSON reparado:', (repaired || '').substring(0, 100) + '...'); } catch {}
          const parsedRepaired = tryParse(repaired);
          if (parsedRepaired) return parsedRepaired;
          break;
        }
      }
    }
  }

  // 3) Tentativa final: remover linhas de coment√°rio acidentais
  const noComments = text.replace(/^\s*\/\/.*$/gm, '').replace(/^\s*#.*$/gm, '');
  console.log('üîç Tentando sem coment√°rios...');
  const parsedNoComments = tryParse(noComments);
  if (parsedNoComments) return parsedNoComments;

  // 4) Fallback: criar JSON b√°sico se nada funcionar
  console.log('‚ö†Ô∏è Criando JSON de fallback...');
  return {
    criteria_analysis: [],
    general_feedback: 'An√°lise autom√°tica indispon√≠vel. Resposta do modelo n√£o p√¥de ser processada.',
    strengths: ['Chamada realizada com sucesso'],
    improvements: ['Revisar configura√ß√£o do modelo de IA'],
    confidence: 0.3,
    analysis_failed: true // Flag para indicar que a an√°lise falhou
  };
}

// Buscar scorecard inteligente baseado nos dados da chamada
async function getActiveScorecard(callData?: any): Promise<Scorecard | null> {
  try {
    console.log('üîç Buscando scorecard inteligente para:', {
      call_type: callData?.call_type,
      pipeline: callData?.pipeline,
      cadence: callData?.cadence
    });

    // Usar nossa nova fun√ß√£o inteligente
    const { data: scorecardMatch, error: matchError } = await supabase.rpc('get_scorecard_smart', {
      call_type_param: callData?.call_type || null,
      pipeline_param: callData?.pipeline || null,
      cadence_param: callData?.cadence || null
    });
    
    if (matchError) {
      console.warn('‚ö†Ô∏è Erro ao buscar scorecard inteligente:', matchError);
      return null;
    }
    
    if (!scorecardMatch || scorecardMatch.length === 0) {
      console.warn('‚ö†Ô∏è Nenhum scorecard encontrado');
      return null;
    }
    
    const match = Array.isArray(scorecardMatch) ? scorecardMatch[0] : scorecardMatch;
    console.log('‚úÖ Scorecard inteligente selecionado:', {
      name: match.name,
      match_score: match.match_score,
      id: match.id
    });
    
    // Retornar o scorecard diretamente (j√° vem completo da fun√ß√£o)
    return {
      id: match.id,
      name: match.name,
      description: match.description,
      active: match.is_active
    };
  } catch (error) {
    console.warn('‚ö†Ô∏è Erro ao buscar scorecard:', error);
    return null;
  }
}

// Buscar crit√©rios do scorecard
async function getScorecardCriteria(scorecardId: string): Promise<ScorecardCriterion[]> {
  try {
    const { data, error } = await supabase.rpc('get_scorecard_criteria', {
      scorecard_id_param: scorecardId
    });
    
    if (error) {
      console.warn('‚ö†Ô∏è Erro ao buscar crit√©rios:', error);
      return [];
    }
    
    return data || [];
  } catch (error) {
    console.warn('‚ö†Ô∏è Erro ao buscar crit√©rios:', error);
    return [];
  }
}

// Criar prompt para an√°lise
function createAnalysisPrompt(
  transcription: string, 
  scorecard: Scorecard, 
  criteria: ScorecardCriterion[]
): string {
  return `
Voc√™ √© um especialista em an√°lise de vendas B2B com 15+ anos de experi√™ncia. Analise esta transcri√ß√£o de chamada comercial usando o scorecard "${scorecard.name}".

CONTEXTO DA AN√ÅLISE:
- Scorecard: ${scorecard.name}
- Descri√ß√£o: ${scorecard.description}
- Objetivo: Avaliar performance da liga√ß√£o comercial

TRANSCRI√á√ÉO DA CHAMADA:
"""
${transcription}
"""

CRIT√âRIOS DE AVALIA√á√ÉO (${criteria.length} crit√©rios):
${criteria.map((c, i) => `
${i + 1}. üìä ${c.name} (Peso: ${c.weight}/3, Pontua√ß√£o m√°xima: ${c.max_score}/3)
   üéØ Descri√ß√£o: ${c.description}
   üí° O que avaliar: Busque evid√™ncias concretas na transcri√ß√£o
`).join('')}

ESCALA DE PONTUA√á√ÉO:
- 0 pontos: Crit√©rio n√£o atendido ou n√£o abordado
- 1 ponto: Crit√©rio parcialmente atendido
- 2 pontos: Crit√©rio bem atendido
- 3 pontos: Crit√©rio excelentemente atendido (apenas quando excepcional)

DIRETRIZES DE AN√ÅLISE:
‚úÖ SEJA RIGOROSO: Pontua√ß√µes altas devem ser bem justificadas
‚úÖ USE EVID√äNCIAS: Cite trechos espec√≠ficos da transcri√ß√£o
‚úÖ SEJA CONSTRUTIVO: Sugest√µes pr√°ticas e acion√°veis
‚úÖ CONSIDERE CONTEXTO: Tipo de liga√ß√£o, etapa do pipeline, perfil do cliente
‚úÖ AVALIE NATURALIDADE: Conversas for√ßadas devem ter pontua√ß√£o menor

IMPORTANTE: RESPONDA APENAS COM JSON V√ÅLIDO. SEM TEXTO ADICIONAL.

Formato JSON obrigat√≥rio:
{
  "criteria_analysis": [
    {
      "criterion_id": "id_do_criterio",
      "achieved_score": 2,
      "analysis": "An√°lise objetiva baseada em evid√™ncias da transcri√ß√£o",
      "evidence": ["'Trecho exato da transcri√ß√£o que comprova'", "'Outro trecho relevante'"],
      "suggestions": ["Sugest√£o espec√≠fica e acion√°vel", "Melhoria com exemplo pr√°tico"]
    }
  ],
  "general_feedback": "Resumo executivo da performance: pontos fortes, principais gaps e pr√≥ximos passos",
  "strengths": ["Ponto forte espec√≠fico com evid√™ncia", "Habilidade demonstrada na liga√ß√£o"],
  "improvements": ["Oportunidade de melhoria com a√ß√£o espec√≠fica", "T√©cnica para aplicar na pr√≥xima liga√ß√£o"],
  "confidence": 0.85
}

VALIDA√á√ÉO OBRIGAT√ìRIA:
- Todos os criterion_id devem corresponder aos crit√©rios fornecidos
- achieved_score deve estar entre 0 e max_score de cada crit√©rio
- evidence deve conter trechos literais da transcri√ß√£o
- confidence deve refletir a qualidade da transcri√ß√£o e clareza da an√°lise
`;
}

// Fun√ß√£o principal de an√°lise
export async function analyzeScorecardWithAI(
  callId: string,
  transcription: string,
  sdrName?: string,
  clientName?: string
): Promise<ScorecardAnalysisResult> {
  
  console.log('üéØ Iniciando an√°lise de scorecard com IA para:', callId);
  
  if (!transcription?.trim()) {
    throw new Error('Transcri√ß√£o n√£o dispon√≠vel para an√°lise');
  }

  // Buscar scorecard inteligente baseado nos dados da chamada
  const callData = await supabase.rpc('get_call_detail', { p_call_id: callId });
  const scorecard = await getActiveScorecard(callData?.data?.[0]);
  if (!scorecard) {
    throw new Error('Nenhum scorecard ativo encontrado. Configure um scorecard primeiro.');
  }

  // Buscar crit√©rios
  const criteria = await getScorecardCriteria(scorecard.id);
  if (criteria.length === 0) {
    throw new Error(`Scorecard "${scorecard.name}" n√£o possui crit√©rios configurados.`);
  }

  console.log('üìã Scorecard encontrado:', scorecard.name, 'com', criteria.length, 'crit√©rios');

  // Criar prompt e chamar OpenAI GPT
  const prompt = createAnalysisPrompt(transcription, scorecard, criteria);
  
  try {
    const response = await callAIAPI(prompt);
    const parsed = extractJson(response);
    
    // Processar resultado
    const criteriaAnalysis: CriterionAnalysis[] = criteria.map(criterion => {
      const analysis = parsed.criteria_analysis?.find((a: any) => 
        a.criterion_id === criterion.id || 
        a.criterion_name === criterion.name ||
        parsed.criteria_analysis?.indexOf(a) === criteria.indexOf(criterion)
      ) || parsed.criteria_analysis?.[criteria.indexOf(criterion)];

      const achievedScore = Math.min(
        Math.max(0, analysis?.achieved_score || 0), 
        criterion.max_score
      );

      return {
        criterion_id: criterion.id,
        criterion_name: criterion.name,
        criterion_description: criterion.description,
        achieved_score: achievedScore,
        max_score: criterion.max_score,
        percentage: Math.round((achievedScore / criterion.max_score) * 100),
        analysis: analysis?.analysis || 'An√°lise n√£o dispon√≠vel',
        suggestions: analysis?.suggestions || [],
        evidence: analysis?.evidence || []
      };
    });

    // Verificar se a an√°lise falhou
    const analysisFailed = parsed.analysis_failed === true;
    
    // Calcular pontua√ß√µes apenas se a an√°lise n√£o falhou
    let totalScore = 0;
    let maxPossibleScore = 0;
    let finalGrade = 0;
    
    if (!analysisFailed) {
      // ‚úÖ CALCULAR COM PESOS: score ponderado pela import√¢ncia de cada crit√©rio
      totalScore = criteriaAnalysis.reduce((sum, c, index) => {
        const criterion = criteria[index];
        const weightedScore = c.achieved_score * (criterion.weight || 1);
        return sum + weightedScore;
      }, 0);
      
      maxPossibleScore = criteriaAnalysis.reduce((sum, c, index) => {
        const criterion = criteria[index];
        const weightedMaxScore = c.max_score * (criterion.weight || 1);
        return sum + weightedMaxScore;
      }, 0);
      
      finalGrade = maxPossibleScore > 0 ? Math.round((totalScore / maxPossibleScore) * 100) / 10 : 0;
      
      console.log('üìä C√°lculo com pesos:', {
        totalScore,
        maxPossibleScore, 
        finalGrade,
        criteriaCount: criteria.length
      });
    } else {
      console.log('‚ö†Ô∏è An√°lise falhou - n√£o calculando nota');
    }

    const result: ScorecardAnalysisResult = {
      scorecard_used: {
        id: scorecard.id,
        name: scorecard.name,
        description: scorecard.description
      },
      overall_score: totalScore,
      max_possible_score: maxPossibleScore,
      final_grade: analysisFailed ? null : finalGrade, // null quando an√°lise falha
      criteria_analysis: criteriaAnalysis,
      general_feedback: parsed.general_feedback || (analysisFailed ? 'An√°lise autom√°tica indispon√≠vel' : 'An√°lise conclu√≠da com sucesso'),
      strengths: parsed.strengths || [],
      improvements: parsed.improvements || [],
      confidence: analysisFailed ? 0 : Math.min(Math.max(0, parsed.confidence || 0.7), 1)
    };

    console.log('‚úÖ An√°lise conclu√≠da:', {
      scorecard: scorecard.name,
      finalGrade: finalGrade,
      totalCriteria: criteriaAnalysis.length,
      confidence: result.confidence
    });

    return result;

  } catch (error) {
    console.error('‚ùå Erro na an√°lise com OpenAI GPT:', error);
    
    // Fallback: an√°lise b√°sica sem IA
    const fallbackAnalysis: CriterionAnalysis[] = criteria.map(criterion => ({
      criterion_id: criterion.id,
      criterion_name: criterion.name,
      criterion_description: criterion.description,
      achieved_score: Math.floor(criterion.max_score * 0.6), // 60% como fallback
      max_score: criterion.max_score,
      percentage: 60,
      analysis: 'An√°lise autom√°tica indispon√≠vel. Revise manualmente.',
      suggestions: ['Revisar grava√ß√£o manualmente', 'Aplicar crit√©rios do scorecard'],
      evidence: []
    }));

    const totalScore = fallbackAnalysis.reduce((sum, c) => sum + c.achieved_score, 0);
    const maxPossibleScore = fallbackAnalysis.reduce((sum, c) => sum + c.max_score, 0);

    return {
      scorecard_used: {
        id: scorecard.id,
        name: scorecard.name,
        description: scorecard.description
      },
      overall_score: null, // ‚úÖ NULL ao inv√©s de 0
      max_possible_score: null, // ‚úÖ NULL ao inv√©s de 0
      final_grade: null, // Sem nota quando an√°lise falha
      criteria_analysis: fallbackAnalysis,
      general_feedback: 'An√°lise autom√°tica indispon√≠vel. Erro: ' + (error instanceof Error ? error.message : 'Erro desconhecido'),
      strengths: ['Chamada realizada com sucesso'],
      improvements: ['Configurar chave da API OpenAI para an√°lise detalhada'],
      confidence: 0.3,
      analysis_failed: true // ‚úÖ Flag para indicar falha
    };
  }
}
